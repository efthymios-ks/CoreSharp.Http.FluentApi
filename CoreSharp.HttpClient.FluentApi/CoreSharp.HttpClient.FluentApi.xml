<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreSharp.HttpClient.FluentApi</name>
    </assembly>
    <members>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.BytesResponse">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IBytesResponse" />
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.CacheQueryResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.ICacheQueryResponse`1"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.ContentMethod">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Concrete.ContentMethod.ToStreamContent(System.Object,System.Int32)">
            <summary>
            Build <see cref="T:System.Net.Http.StreamContent" /> from given item.
            </summary>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.JsonQueryResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IJsonQueryResponse`1"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.JsonResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IJsonResponse`1"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.Method">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IMethod"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.QueryMethod">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.Request">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IRequest"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.Response">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IResponse" />
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.Route">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IRoute"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.StreamResponse">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IStreamResponse" />
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.StringResponse">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IStringResponse" />
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.XmlQueryResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IXmlQueryResponse`1"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Concrete.XmlResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IXmlResponse`1"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Contracts.GenericQueryResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IGenericQueryResponse`1"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Contracts.GenericResponse`1">
            <inheritdoc cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IGenericResponse`1"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IBytesResponse.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IResponse.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.ICacheQueryResponse`1.Cache(System.TimeSpan)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IGenericQueryResponse`1.Cache(System.TimeSpan)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.ICacheQueryResponse`1.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IGenericResponse`1.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.String,System.Text.Encoding,System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.String,System.Text.Encoding,System.String)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.Net.Http.HttpContent)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.JsonContent(System.String)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.String,System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.JsonContent(System.Object)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.Net.Http.HttpContent)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.XmlContent(System.String)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.String,System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.XmlContent(System.Object)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.Net.Http.HttpContent)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IContentMethod.Content(System.Net.Http.HttpContent)">
            <summary>
            Sets <see cref="P:System.Net.Http.HttpRequestMessage.Content"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IGenericQueryResponse`1.Cache(System.TimeSpan)">
            <summary>
            Enable in-memory, client-side response caching.
            Uses <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> internally.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IGenericResponse`1.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IResponse.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IJsonQueryResponse`1.Cache(System.TimeSpan)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.ICacheQueryResponse`1.Cache(System.TimeSpan)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IJsonQueryResponse`1.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IGenericResponse`1.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.HttpMethod">
            <inheritdoc cref="P:System.Net.Http.HttpRequestMessage.Method" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.To``1">
            <summary>
            Check <see cref="F:Microsoft.Net.Http.Headers.HeaderNames.ContentType"/>
            in <see cref="P:System.Net.Http.HttpResponseMessage.Headers"/>
            and deserialize accordingly.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(System.Func{System.IO.Stream,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(Newtonsoft.Json.JsonSerializerSettings)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(System.Func{System.IO.Stream,``0})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(System.Func{System.String,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(System.Func{System.String,``0})">
            <summary>
            Treat <see cref="P:System.Net.Http.HttpResponseMessage.Content"/>
            as json and deserialize to provided type.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Xml``1">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Xml``1(System.Func{System.IO.Stream,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Xml``1(System.Func{System.IO.Stream,``0})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Xml``1(System.Func{System.String,``0})"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Xml``1(System.Func{System.String,``0})">
            <summary>
            Treat <see cref="P:System.Net.Http.HttpResponseMessage.Content"/>
            as xml and deserialize to provided type.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.String">
            <inheritdoc cref="M:System.Net.Http.HttpContent.ReadAsStringAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Stream">
            <inheritdoc cref="M:System.Net.Http.HttpContent.ReadAsStreamAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Bytes">
            <inheritdoc cref="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Query``1(``0)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Query(System.Collections.Generic.IDictionary{System.String,System.Object})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Query(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Query(System.String,System.Object)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Query(System.String,System.Object)">
            <summary>
            Set query parameter.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.To``1">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.To``1" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1(Newtonsoft.Json.JsonSerializerSettings)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1(System.Func{System.IO.Stream,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1(System.Func{System.String,``0})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1(System.Func{System.IO.Stream,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Json``1(System.Func{System.IO.Stream,``0})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Json``1(System.Func{System.IO.Stream,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Xml``1">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Xml``1(System.Func{System.IO.Stream,``0})" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Xml``1(System.Func{System.IO.Stream,``0})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Xml``1(System.Func{System.String,``0})"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IQueryMethod.Xml``1(System.Func{System.String,``0})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.Xml``1(System.Func{System.String,``0})" />
        </member>
        <member name="P:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.HttpClient">
            <inheritdoc cref="T:System.Net.Http.HttpClient" />
        </member>
        <member name="P:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.CompletionOptionInternal">
            <inheritdoc cref="T:System.Net.Http.HttpCompletionOption"/>
        </member>
        <member name="P:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.HeadersInternal">
            <inheritdoc cref="P:System.Net.Http.HttpRequestMessage.Headers" />
        </member>
        <member name="P:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.ThrowOnError">
            <summary>
            Whether the interface should throw an <see cref="T:CoreSharp.Models.HttpResponseException"/>
            or not on unsuccessful requests using <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Headers(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Header(System.String,System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Header(System.String,System.String)">
            <summary>
            Add specified key-value header
            to outgoing <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Accept(System.String)">
            <summary>
            Set the <see cref="F:Microsoft.Net.Http.Headers.HeaderNames.Accept"/> header.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.AcceptJson">
            <summary>
            Set the <see cref="F:Microsoft.Net.Http.Headers.HeaderNames.Accept"/> header
            to <see cref="F:System.Net.Mime.MediaTypeNames.Application.Json"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.AcceptXml">
            <summary>
            Set the <see cref="F:Microsoft.Net.Http.Headers.HeaderNames.Accept"/> header
            to <see cref="F:System.Net.Mime.MediaTypeNames.Application.Xml"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Bearer(System.String)">
            <summary>
            Set the <see cref="F:Microsoft.Net.Http.Headers.HeaderNames.Authorization"/> header
            to bearer given value.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.IgnoreError">
            <inheritdoc cref="P:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.ThrowOnError" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.CompletionOption(System.Net.Http.HttpCompletionOption)">
            <inheritdoc cref="P:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.CompletionOptionInternal" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String,System.Int32)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String,System.Int64)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String,System.Guid)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String)" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRequest.Route(System.String)">
            <summary>
            Set <see cref="P:System.Net.Http.HttpRequestMessage.RequestUri"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IResponse.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:CoreSharp.HttpClient.FluentApi.Contracts.IRoute.Route">
            <inheritdoc cref="P:System.Net.Http.HttpRequestMessage.RequestUri" />
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRoute.Get">
            <summary>
            Set request to <see cref="P:System.Net.Http.HttpMethod.Get"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRoute.Post">
            <summary>
            Set request to <see cref="P:System.Net.Http.HttpMethod.Post"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRoute.Put">
            <summary>
            Set request to <see cref="P:System.Net.Http.HttpMethod.Put"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRoute.Patch">
            <summary>
            Set request to <see cref="P:System.Net.Http.HttpMethod.Patch"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IRoute.Delete">
            <summary>
            Set request to <see cref="P:System.Net.Http.HttpMethod.Delete"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IStreamResponse.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IResponse.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IStringResponse.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IResponse.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IXmlQueryResponse`1.Cache(System.TimeSpan)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.ICacheQueryResponse`1.Cache(System.TimeSpan)"/>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Contracts.IXmlQueryResponse`1.SendAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IGenericResponse`1.SendAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Extensions.HttpClientExtensions">
            <summary>
            <see cref="N:CoreSharp.HttpClient"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Extensions.HttpClientExtensions.Request(System.Net.Http.HttpClient)">
            <summary>
            Start a chained configuration for a new http request.
            </summary>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.HttpMethodX">
            <summary>
            <see cref="T:System.Net.Http.HttpMethod"/> utilities.
            </summary>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Utilities.ICacheQueryX">
            <summary>
            <see cref="T:CoreSharp.HttpClient.FluentApi.Contracts.ICacheQueryResponse`1"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Utilities.ICacheQueryX.CachedRequestAsync``1(System.Threading.Tasks.Task{``0},System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Return cached response.
            If not existing or timed-out,
            request new response and cache.
            </summary>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Utilities.IJsonResponseX">
            <summary>
            <see cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IJsonResponse`1"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Utilities.IJsonResponseX.SendAsync``1(CoreSharp.HttpClient.FluentApi.Contracts.IJsonResponse{``0},System.Threading.CancellationToken)">
            <summary>
            Call <see cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.SendAsync(System.Threading.CancellationToken)"/>
            and deserialize to provided type using either
            <see cref="P:CoreSharp.HttpClient.FluentApi.Contracts.IJsonResponse`1.DeserializeStreamFunction"/> or
            <see cref="P:CoreSharp.HttpClient.FluentApi.Contracts.IJsonResponse`1.DeserializeStringFunction"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Utilities.IMethodX">
            <summary>
            <see cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IMethod"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Utilities.IMethodX.SendAsync(CoreSharp.HttpClient.FluentApi.Contracts.IMethod,System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.SendAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="T:CoreSharp.HttpClient.FluentApi.Utilities.IXmlResponseX">
            <summary>
            <see cref="T:CoreSharp.HttpClient.FluentApi.Contracts.IXmlResponse`1"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.HttpClient.FluentApi.Utilities.IXmlResponseX.SendAsync``1(CoreSharp.HttpClient.FluentApi.Contracts.IXmlResponse{``0},System.Threading.CancellationToken)">
            <summary>
            Call <see cref="M:CoreSharp.HttpClient.FluentApi.Contracts.IMethod.SendAsync(System.Threading.CancellationToken)"/>
            and deserialize to provided type using either
            <see cref="P:CoreSharp.HttpClient.FluentApi.Contracts.IXmlResponse`1.DeserializeStreamFunction"/> or
            <see cref="P:CoreSharp.HttpClient.FluentApi.Contracts.IXmlResponse`1.DeserializeStringFunction"/>.
            </summary>
        </member>
    </members>
</doc>
